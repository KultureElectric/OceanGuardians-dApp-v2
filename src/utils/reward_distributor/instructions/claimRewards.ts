/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ClaimRewards
 * @category generated
 */
export const claimRewardsStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ClaimRewardsInstructionArgs'
)
/**
 * Accounts required by the _claimRewards_ instruction
 *
 * @property [_writable_] rewardEntry
 * @property [_writable_] rewardDistributor
 * @property [_writable_] rewardDistributorTokenAccount
 * @property [] stakeEntry
 * @property [] stakePool
 * @property [_writable_] rewardMint
 * @property [_writable_] userRewardMintTokenAccount
 * @property [_writable_] rewardManager
 * @property [_writable_, **signer**] user
 * @category Instructions
 * @category ClaimRewards
 * @category generated
 */
export type ClaimRewardsInstructionAccounts = {
  rewardEntry: web3.PublicKey
  rewardDistributor: web3.PublicKey
  rewardDistributorTokenAccount: web3.PublicKey
  stakeEntry: web3.PublicKey
  stakePool: web3.PublicKey
  rewardMint: web3.PublicKey
  userRewardMintTokenAccount: web3.PublicKey
  rewardManager: web3.PublicKey
  user: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const claimRewardsInstructionDiscriminator = [
  4, 144, 132, 71, 116, 23, 151, 80,
]

/**
 * Creates a _ClaimRewards_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ClaimRewards
 * @category generated
 */
export function createClaimRewardsInstruction(
  accounts: ClaimRewardsInstructionAccounts,
  programId = new web3.PublicKey('DEvYCMc1BQ7uN3hHgdmHgiNQee2vydMdX3xg9ZJf42c8')
) {
  const [data] = claimRewardsStruct.serialize({
    instructionDiscriminator: claimRewardsInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.rewardEntry,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardDistributor,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardDistributorTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeEntry,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakePool,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userRewardMintTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardManager,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
