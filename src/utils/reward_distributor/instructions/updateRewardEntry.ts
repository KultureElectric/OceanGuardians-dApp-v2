/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  UpdateRewardEntryIx,
  updateRewardEntryIxBeet,
} from '../types/UpdateRewardEntryIx'

/**
 * @category Instructions
 * @category UpdateRewardEntry
 * @category generated
 */
export type UpdateRewardEntryInstructionArgs = {
  ix: UpdateRewardEntryIx
}
/**
 * @category Instructions
 * @category UpdateRewardEntry
 * @category generated
 */
export const updateRewardEntryStruct = new beet.BeetArgsStruct<
  UpdateRewardEntryInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['ix', updateRewardEntryIxBeet],
  ],
  'UpdateRewardEntryInstructionArgs'
)
/**
 * Accounts required by the _updateRewardEntry_ instruction
 *
 * @property [_writable_] rewardEntry
 * @property [] rewardDistributor
 * @property [**signer**] authority
 * @category Instructions
 * @category UpdateRewardEntry
 * @category generated
 */
export type UpdateRewardEntryInstructionAccounts = {
  rewardEntry: web3.PublicKey
  rewardDistributor: web3.PublicKey
  authority: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const updateRewardEntryInstructionDiscriminator = [
  102, 76, 212, 206, 101, 194, 250, 16,
]

/**
 * Creates a _UpdateRewardEntry_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateRewardEntry
 * @category generated
 */
export function createUpdateRewardEntryInstruction(
  accounts: UpdateRewardEntryInstructionAccounts,
  args: UpdateRewardEntryInstructionArgs,
  programId = new web3.PublicKey('DEvYCMc1BQ7uN3hHgdmHgiNQee2vydMdX3xg9ZJf42c8')
) {
  const [data] = updateRewardEntryStruct.serialize({
    instructionDiscriminator: updateRewardEntryInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.rewardEntry,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardDistributor,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
