/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  UpdateRewardDistributorIx,
  updateRewardDistributorIxBeet,
} from '../types/UpdateRewardDistributorIx'

/**
 * @category Instructions
 * @category UpdateRewardDistributor
 * @category generated
 */
export type UpdateRewardDistributorInstructionArgs = {
  ix: UpdateRewardDistributorIx
}
/**
 * @category Instructions
 * @category UpdateRewardDistributor
 * @category generated
 */
export const updateRewardDistributorStruct = new beet.BeetArgsStruct<
  UpdateRewardDistributorInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['ix', updateRewardDistributorIxBeet],
  ],
  'UpdateRewardDistributorInstructionArgs'
)
/**
 * Accounts required by the _updateRewardDistributor_ instruction
 *
 * @property [_writable_] rewardDistributor
 * @property [] stakePool
 * @property [**signer**] authority
 * @category Instructions
 * @category UpdateRewardDistributor
 * @category generated
 */
export type UpdateRewardDistributorInstructionAccounts = {
  rewardDistributor: web3.PublicKey
  stakePool: web3.PublicKey
  authority: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const updateRewardDistributorInstructionDiscriminator = [
  168, 16, 57, 210, 250, 214, 155, 146,
]

/**
 * Creates a _UpdateRewardDistributor_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateRewardDistributor
 * @category generated
 */
export function createUpdateRewardDistributorInstruction(
  accounts: UpdateRewardDistributorInstructionAccounts,
  args: UpdateRewardDistributorInstructionArgs,
  programId = new web3.PublicKey('DEvYCMc1BQ7uN3hHgdmHgiNQee2vydMdX3xg9ZJf42c8')
) {
  const [data] = updateRewardDistributorStruct.serialize({
    instructionDiscriminator: updateRewardDistributorInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.rewardDistributor,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakePool,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
