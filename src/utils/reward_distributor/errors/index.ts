/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidTokenAccount: 'Invalid token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenAccountError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidTokenAccount'
  constructor() {
    super('Invalid token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidTokenAccountError())
createErrorFromNameLookup.set(
  'InvalidTokenAccount',
  () => new InvalidTokenAccountError()
)

/**
 * InvalidRewardMint: 'Invalid reward mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRewardMintError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidRewardMint'
  constructor() {
    super('Invalid reward mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRewardMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidRewardMintError())
createErrorFromNameLookup.set(
  'InvalidRewardMint',
  () => new InvalidRewardMintError()
)

/**
 * InvalidUserRewardMintTokenAccount: 'Invalid user reward mint token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidUserRewardMintTokenAccountError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidUserRewardMintTokenAccount'
  constructor() {
    super('Invalid user reward mint token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidUserRewardMintTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1772,
  () => new InvalidUserRewardMintTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidUserRewardMintTokenAccount',
  () => new InvalidUserRewardMintTokenAccountError()
)

/**
 * InvalidRewardDistributor: 'Invalid reward distributor'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRewardDistributorError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidRewardDistributor'
  constructor() {
    super('Invalid reward distributor')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRewardDistributorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidRewardDistributorError())
createErrorFromNameLookup.set(
  'InvalidRewardDistributor',
  () => new InvalidRewardDistributorError()
)

/**
 * InvalidRewardDistributorAuthority: 'Invalid reward distributor authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRewardDistributorAuthorityError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InvalidRewardDistributorAuthority'
  constructor() {
    super('Invalid reward distributor authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRewardDistributorAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1774,
  () => new InvalidRewardDistributorAuthorityError()
)
createErrorFromNameLookup.set(
  'InvalidRewardDistributorAuthority',
  () => new InvalidRewardDistributorAuthorityError()
)

/**
 * InvalidRewardDistributorKind: 'Invalid reward distributor kind'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRewardDistributorKindError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InvalidRewardDistributorKind'
  constructor() {
    super('Invalid reward distributor kind')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRewardDistributorKindError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1775,
  () => new InvalidRewardDistributorKindError()
)
createErrorFromNameLookup.set(
  'InvalidRewardDistributorKind',
  () => new InvalidRewardDistributorKindError()
)

/**
 * SupplyRequired: 'Initial supply required for kind treasury'
 *
 * @category Errors
 * @category generated
 */
export class SupplyRequiredError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'SupplyRequired'
  constructor() {
    super('Initial supply required for kind treasury')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SupplyRequiredError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new SupplyRequiredError())
createErrorFromNameLookup.set('SupplyRequired', () => new SupplyRequiredError())

/**
 * InvalidAuthority: 'Invalid authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'InvalidAuthority'
  constructor() {
    super('Invalid authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new InvalidAuthorityError())
createErrorFromNameLookup.set(
  'InvalidAuthority',
  () => new InvalidAuthorityError()
)

/**
 * InvalidPoolDistributor: 'Invalid distributor for pool'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPoolDistributorError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InvalidPoolDistributor'
  constructor() {
    super('Invalid distributor for pool')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPoolDistributorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InvalidPoolDistributorError())
createErrorFromNameLookup.set(
  'InvalidPoolDistributor',
  () => new InvalidPoolDistributorError()
)

/**
 * DistributorNotClosed: 'Distributor is already open'
 *
 * @category Errors
 * @category generated
 */
export class DistributorNotClosedError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'DistributorNotClosed'
  constructor() {
    super('Distributor is already open')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DistributorNotClosedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new DistributorNotClosedError())
createErrorFromNameLookup.set(
  'DistributorNotClosed',
  () => new DistributorNotClosedError()
)

/**
 * DistributorAlreadyClosed: 'Distributor is already closed'
 *
 * @category Errors
 * @category generated
 */
export class DistributorAlreadyClosedError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'DistributorAlreadyClosed'
  constructor() {
    super('Distributor is already closed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DistributorAlreadyClosedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new DistributorAlreadyClosedError())
createErrorFromNameLookup.set(
  'DistributorAlreadyClosed',
  () => new DistributorAlreadyClosedError()
)

/**
 * InvalidStakeEntry: 'Invalid stake entry'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeEntryError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'InvalidStakeEntry'
  constructor() {
    super('Invalid stake entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakeEntryError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new InvalidStakeEntryError())
createErrorFromNameLookup.set(
  'InvalidStakeEntry',
  () => new InvalidStakeEntryError()
)

/**
 * InvalidRewardEntry: 'Invalid reward entry'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRewardEntryError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'InvalidRewardEntry'
  constructor() {
    super('Invalid reward entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRewardEntryError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new InvalidRewardEntryError())
createErrorFromNameLookup.set(
  'InvalidRewardEntry',
  () => new InvalidRewardEntryError()
)

/**
 * WrongMultiplier: 'Multiplier has to be > 100'
 *
 * @category Errors
 * @category generated
 */
export class WrongMultiplierError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'WrongMultiplier'
  constructor() {
    super('Multiplier has to be > 100')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongMultiplierError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new WrongMultiplierError())
createErrorFromNameLookup.set(
  'WrongMultiplier',
  () => new WrongMultiplierError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
