/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category InitStakeMint
 * @category generated
 */
export const initStakeMintStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'InitStakeMintInstructionArgs'
)
/**
 * Accounts required by the _initStakeMint_ instruction
 *
 * @property [_writable_] stakeEntry
 * @property [_writable_] stakePool
 * @property [] originalMint
 * @property [] originalMintMetadata
 * @property [_writable_, **signer**] stakeMint
 * @property [_writable_] stakeMintMetadata
 * @property [_writable_] stakeEntryStakeMintTokenAccount
 * @property [_writable_] mintManager
 * @property [_writable_, **signer**] payer
 * @property [] tokenManagerProgram
 * @property [] associatedTokenProgram
 * @property [] tokenMetadataProgram
 * @category Instructions
 * @category InitStakeMint
 * @category generated
 */
export type InitStakeMintInstructionAccounts = {
  stakeEntry: web3.PublicKey
  stakePool: web3.PublicKey
  originalMint: web3.PublicKey
  originalMintMetadata: web3.PublicKey
  stakeMint: web3.PublicKey
  stakeMintMetadata: web3.PublicKey
  stakeEntryStakeMintTokenAccount: web3.PublicKey
  mintManager: web3.PublicKey
  payer: web3.PublicKey
  rent?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  tokenManagerProgram: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  tokenMetadataProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const initStakeMintInstructionDiscriminator = [
  113, 57, 116, 51, 153, 118, 47, 236,
]

/**
 * Creates a _InitStakeMint_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category InitStakeMint
 * @category generated
 */
export function createInitStakeMintInstruction(
  accounts: InitStakeMintInstructionAccounts,
  programId = new web3.PublicKey('CsfVevZy66ARUY74VCw8Hqxzjkjis9qLAN3bj49m5wTB')
) {
  const [data] = initStakeMintStruct.serialize({
    instructionDiscriminator: initStakeMintInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.stakeEntry,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakePool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.originalMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.originalMintMetadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeMint,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.stakeMintMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeEntryStakeMintTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mintManager,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenManagerProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
