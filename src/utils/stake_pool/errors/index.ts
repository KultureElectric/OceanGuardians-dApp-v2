/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidOriginalMint: 'Invalid Original Mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidOriginalMintError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidOriginalMint'
  constructor() {
    super('Invalid Original Mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidOriginalMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidOriginalMintError())
createErrorFromNameLookup.set(
  'InvalidOriginalMint',
  () => new InvalidOriginalMintError()
)

/**
 * NoMintMetadata: 'No mint metadata'
 *
 * @category Errors
 * @category generated
 */
export class NoMintMetadataError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'NoMintMetadata'
  constructor() {
    super('No mint metadata')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoMintMetadataError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new NoMintMetadataError())
createErrorFromNameLookup.set('NoMintMetadata', () => new NoMintMetadataError())

/**
 * MintNotAllowedInPool: 'Mint not allowed in pool'
 *
 * @category Errors
 * @category generated
 */
export class MintNotAllowedInPoolError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'MintNotAllowedInPool'
  constructor() {
    super('Mint not allowed in pool')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintNotAllowedInPoolError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new MintNotAllowedInPoolError())
createErrorFromNameLookup.set(
  'MintNotAllowedInPool',
  () => new MintNotAllowedInPoolError()
)

/**
 * InvalidStakePool: 'Invalid Stake Pool'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakePoolError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidStakePool'
  constructor() {
    super('Invalid Stake Pool')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakePoolError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidStakePoolError())
createErrorFromNameLookup.set(
  'InvalidStakePool',
  () => new InvalidStakePoolError()
)

/**
 * InvalidUserOriginalMintTokenAccount: 'Invalid Original Token account of user'
 *
 * @category Errors
 * @category generated
 */
export class InvalidUserOriginalMintTokenAccountError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InvalidUserOriginalMintTokenAccount'
  constructor() {
    super('Invalid Original Token account of user')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidUserOriginalMintTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1774,
  () => new InvalidUserOriginalMintTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidUserOriginalMintTokenAccount',
  () => new InvalidUserOriginalMintTokenAccountError()
)

/**
 * InvalidStakeEntryOriginalMintTokenAccount: 'Invalid Original Token account of StakeMint pda'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeEntryOriginalMintTokenAccountError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InvalidStakeEntryOriginalMintTokenAccount'
  constructor() {
    super('Invalid Original Token account of StakeMint pda')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        InvalidStakeEntryOriginalMintTokenAccountError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x1775,
  () => new InvalidStakeEntryOriginalMintTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidStakeEntryOriginalMintTokenAccount',
  () => new InvalidStakeEntryOriginalMintTokenAccountError()
)

/**
 * StakeEntryAlreadyStaked: 'NFT already staked'
 *
 * @category Errors
 * @category generated
 */
export class StakeEntryAlreadyStakedError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'StakeEntryAlreadyStaked'
  constructor() {
    super('NFT already staked')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakeEntryAlreadyStakedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new StakeEntryAlreadyStakedError())
createErrorFromNameLookup.set(
  'StakeEntryAlreadyStaked',
  () => new StakeEntryAlreadyStakedError()
)

/**
 * InvalidStakeEntryMintTokenAccount: 'Invalid Stake Entry Mint Token Account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeEntryMintTokenAccountError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'InvalidStakeEntryMintTokenAccount'
  constructor() {
    super('Invalid Stake Entry Mint Token Account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakeEntryMintTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1777,
  () => new InvalidStakeEntryMintTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidStakeEntryMintTokenAccount',
  () => new InvalidStakeEntryMintTokenAccountError()
)

/**
 * InvalidLastStaker: 'Invalid Last Staker'
 *
 * @category Errors
 * @category generated
 */
export class InvalidLastStakerError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InvalidLastStaker'
  constructor() {
    super('Invalid Last Staker')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidLastStakerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InvalidLastStakerError())
createErrorFromNameLookup.set(
  'InvalidLastStaker',
  () => new InvalidLastStakerError()
)

/**
 * InvalidReceiptMint: 'Invalid Receipt Mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidReceiptMintError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'InvalidReceiptMint'
  constructor() {
    super('Invalid Receipt Mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidReceiptMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new InvalidReceiptMintError())
createErrorFromNameLookup.set(
  'InvalidReceiptMint',
  () => new InvalidReceiptMintError()
)

/**
 * InvalidUnstakeUser: 'Invalid Unstake User'
 *
 * @category Errors
 * @category generated
 */
export class InvalidUnstakeUserError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidUnstakeUser'
  constructor() {
    super('Invalid Unstake User')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidUnstakeUserError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new InvalidUnstakeUserError())
createErrorFromNameLookup.set(
  'InvalidUnstakeUser',
  () => new InvalidUnstakeUserError()
)

/**
 * InvalidStakeEntryStakeTokenAccount: 'Invalid Stake Entry Token Account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeEntryStakeTokenAccountError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'InvalidStakeEntryStakeTokenAccount'
  constructor() {
    super('Invalid Stake Entry Token Account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakeEntryStakeTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177b,
  () => new InvalidStakeEntryStakeTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidStakeEntryStakeTokenAccount',
  () => new InvalidStakeEntryStakeTokenAccountError()
)

/**
 * CannotCloseStakedEntry: 'Cannot close staked entry'
 *
 * @category Errors
 * @category generated
 */
export class CannotCloseStakedEntryError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'CannotCloseStakedEntry'
  constructor() {
    super('Cannot close staked entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotCloseStakedEntryError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new CannotCloseStakedEntryError())
createErrorFromNameLookup.set(
  'CannotCloseStakedEntry',
  () => new CannotCloseStakedEntryError()
)

/**
 * InvalidAuthority: 'Invalid authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'InvalidAuthority'
  constructor() {
    super('Invalid authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new InvalidAuthorityError())
createErrorFromNameLookup.set(
  'InvalidAuthority',
  () => new InvalidAuthorityError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
